# Generated by Django 5.1.2 on 2025-11-01 03:18

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique user identifier', primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='User email address (used for login)', max_length=255, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('first_name', models.CharField(help_text="User's first name", max_length=100)),
                ('last_name', models.CharField(help_text="User's last name", max_length=100)),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user account is active')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether user has verified their email')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether user can log into admin site')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Account creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('CUSTOMER', 'Customer'), ('ADMIN', 'Administrator'), ('MANAGER', 'Manager')], help_text='Role name', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Role description', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Role creation timestamp')),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'db_table': 'user_roles',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='user_roles_name_66ac83_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserRoleMapping',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='Role assignment timestamp')),
                ('role', models.ForeignKey(help_text='Role', on_delete=django.db.models.deletion.CASCADE, related_name='user_mappings', to='users.userrole')),
                ('user', models.ForeignKey(help_text='User', on_delete=django.db.models.deletion.CASCADE, related_name='role_mappings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Role Mapping',
                'verbose_name_plural': 'User Role Mappings',
                'db_table': 'user_role_mapping',
                'ordering': ['-assigned_at'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(help_text='User roles', related_name='users', through='users.UserRoleMapping', to='users.userrole'),
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique token identifier', primary_key=True, serialize=False)),
                ('token', models.CharField(help_text='Reset token', max_length=255, unique=True)),
                ('expires_at', models.DateTimeField(help_text='Token expiration timestamp')),
                ('is_used', models.BooleanField(default=False, help_text='Whether token has been used')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Token creation timestamp')),
                ('user', models.ForeignKey(help_text='User requesting password reset', on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Password Reset Token',
                'verbose_name_plural': 'Password Reset Tokens',
                'db_table': 'password_reset_tokens',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user'], name='password_re_user_id_af59e2_idx'), models.Index(fields=['token'], name='password_re_token_060a1f_idx'), models.Index(fields=['expires_at'], name='password_re_expires_8e96b7_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique address identifier', primary_key=True, serialize=False)),
                ('address_type', models.CharField(choices=[('SHIPPING', 'Shipping Address'), ('BILLING', 'Billing Address')], help_text='Address type (shipping or billing)', max_length=20)),
                ('full_name', models.CharField(help_text="Recipient's full name", max_length=200)),
                ('phone_number', models.CharField(help_text='Contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('address_line1', models.CharField(help_text='Street address, P.O. box', max_length=255)),
                ('address_line2', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('state', models.CharField(help_text='State/Province/Region', max_length=100)),
                ('postal_code', models.CharField(help_text='ZIP/Postal code', max_length=20)),
                ('country', models.CharField(default='India', help_text='Country', max_length=100)),
                ('is_default', models.BooleanField(default=False, help_text='Default address for this type')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Address creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('user', models.ForeignKey(help_text='User who owns this address', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Address',
                'verbose_name_plural': 'User Addresses',
                'db_table': 'user_addresses',
                'ordering': ['-is_default', '-created_at'],
                'indexes': [models.Index(fields=['user'], name='user_addres_user_id_0ee5d5_idx'), models.Index(fields=['address_type'], name='user_addres_address_c0746f_idx'), models.Index(fields=['is_default'], name='user_addres_is_defa_43d9e3_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='userrolemapping',
            index=models.Index(fields=['user'], name='user_role_m_user_id_4f1c1e_idx'),
        ),
        migrations.AddIndex(
            model_name='userrolemapping',
            index=models.Index(fields=['role'], name='user_role_m_role_id_9dd20c_idx'),
        ),
        migrations.AddIndex(
            model_name='userrolemapping',
            index=models.Index(fields=['assigned_at'], name='user_role_m_assigne_7da720_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrolemapping',
            unique_together={('user', 'role')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone_number'], name='users_phone_n_a3b1c5_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
    ]
